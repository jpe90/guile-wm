#!/usr/bin/guile3 \
-e main
!#

;; This file is part of Guile-WM.

;;    Guile-WM is free software: you can redistribute it and/or modify
;;    it under the terms of the GNU General Public License as published by
;;    the Free Software Foundation, either version 3 of the License, or
;;    (at your option) any later version.

;;    Guile-WM is distributed in the hope that it will be useful,
;;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;    GNU General Public License for more details.

;;    You should have received a copy of the GNU General Public License
;;    along with Guile-WM.  If not, see <http://www.gnu.org/licenses/>.

(use-modules
 (guile-wm shared)
 (guile-wm user)
 (guile-wm log)
 (ice-9 format)
 (ice-9 regex)
 (ice-9 rdelim)
 (ice-9 getopt-long)
 (xcb event-loop)
 (xcb xml)
 (xcb xml xproto)
 (system base compile))

(define (report-error resume data)
  (catch #t
    (lambda ()
      (format (current-error-port) "X Error: ~a \n~{~a~}"
              (xcb-struct-name (xcb-struct data))
              (map (lambda (f) (format #f "~a: ~a\n"
                                       f (xref (xcb-data data) f)))
                   (xcb-struct-fields (xcb-struct data)))))
    (lambda args (log! "Unknown error: ~a" data)))
  (resume))

(define wm-modules-spec (make-regexp "^;+\\s+wm-modules:\\s+(.+)"))

(define (get-user-modules init-file)
  (define (read-module-names str)
    (define (read-names)
      (let read-name ((names '()) (raw-name (read)))
        (cond
         ((eof-object? raw-name) names)
         ((list? raw-name) (read-name (cons raw-name names) (read)))
         (else (read-name (cons raw-name names) (read))))))
    (with-input-from-string str read-names))
  (define (read-modules)
    (let get-imports ((to-import '()) (l (read-line)))
      (define (get-imports-from-match match)
        (get-imports
         (append (read-module-names (match:substring match 1)) to-import)
         (read-line)))
      (if (eof-object? (peek-char)) to-import
          (or (and=> (regexp-exec wm-modules-spec l) get-imports-from-match)
              (get-imports to-import (read-line))))))
  (define module-list (with-input-from-file init-file read-modules))
  (cons 'use-wm-modules module-list))

(define (make-xcb-connection)
  (let lp ((attempts 0))
    (or (xcb-connect!)
        (if (= attempts 4)
            (error "Could not establish XCB connection")
            (begin (usleep 500000)
                   (lp (+ attempts 1)))))))

(define (begin-event-loop init-file log-file)
  (open-log log-file)
  (log! "Beginning event loop")
  (let ((xcb-conn (make-xcb-connection)))
       (log! "XCB is connected")
       (event-loop-prepare! xcb-conn report-error)
       (loop-with-connection xcb-conn
         (current-screen (xref (xcb-connection-setup xcb-conn) 'roots 0))
         (current-root (xref (current-screen) 'root))
         (let ((user-module (resolve-module '(guile-wm user))))
           (set-current-module user-module)
           (when init-file
             (compile (get-user-modules init-file) #:env user-module)
             (compile `(begin
                         (init-guile-wm-modules!)
                         (include ,init-file))
                      #:env user-module)))))
  (close-log))

(define (main . args)
  (define option-spec
    '((version   (single-char #\v) (value #f))
      (init-file (single-char #\i) (value #t))
      (log-file  (single-char #\l) (value #t))
      (help      (single-char #\h) (value #f))))
  (define options (getopt-long (command-line) option-spec))
  (define help-wanted? (option-ref options 'help #f))
  (define version-wanted? (option-ref options 'version #f))
  (define log-file (option-ref
                    options 'log-file
                    (format #f "/tmp/guile-wm.log")))
  (define init-file
    (option-ref
     options 'init-file
     (format #f "~a/.guile-wm" (getenv "HOME"))))
  (if (or version-wanted? help-wanted?)
      (begin
        (if version-wanted? (display "Guile-WM version 0.1\n"))
        (if help-wanted?
            (display "\
     guile-wm [options]
       -v, --version    Display version
       -i, --init-file  Use the given init file (default \"$HOME/.guile-wm\")
       -l, --log-file   Use the given log file (defaults \"/tmp/guile-wm.log\")
       -h, --help       Display this help\n")))
      (begin-event-loop init-file log-file)))
